name: CI

on:
  push:
    branches:
      - dev
      - qa
      - prod

jobs:
  build-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Application Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry (ACR)
        run: az acr login --name metabank

      - name: Prepare Image Tag
        id: prepare-tag
        run: |
          TAG=$(date +%s)
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Generated TAG: $TAG"

      - name: Build and Push Docker Image to Azure ACR
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            metabank.azurecr.io/metanet-msa-migration-quiz-reward:latest
            metabank.azurecr.io/metanet-msa-migration-quiz-reward:${{ env.TAG }}

      - name: Checkout ArgoCD Repository (Always use main)
        uses: actions/checkout@v3
        with:
          repository: Metanet-Signal-Platoon/ArgoCD-metabank
          token: ${{ secrets.GH_PAT }}
          ref: main  # ✅ 항상 main 브랜치를 체크아웃
          fetch-depth: 0  

      - name: Set Environment Variables Based on Branch
        run: |
          # 디렉토리는 고정
          BASE_DIR="argo-metanet-msa-migration-quiz-reward-helm"
          echo "BASE_DIR=$BASE_DIR" >> $GITHUB_ENV

          # 브랜치별 values 파일 설정
          echo "VALUES_FILE=$BASE_DIR/values-${{ github.ref_name }}.yaml" >> $GITHUB_ENV
          echo "VALUE_FILE_NAME=values-${{ github.ref_name }}.yaml" >> $GITHUB_ENV

          # application.yaml 경로 고정
          echo "APP_FILE=$BASE_DIR/templates/application.yaml" >> $GITHUB_ENV

      - name: Check File Paths
        run: |
          echo "Checking if values.yaml and application.yaml exist..."
          
          ls -lah $BASE_DIR  # 파일 리스트 확인

          if [ ! -f "${{ env.VALUES_FILE }}" ]; then
            echo "Error: values.yaml not found at ${{ env.VALUES_FILE }}"
            exit 1
          fi
          if [ ! -f "${{ env.APP_FILE }}" ]; then
            echo "Error: application.yaml not found at ${{ env.APP_FILE }}"
            exit 1
          fi

          echo "✅ Found values file: ${{ env.VALUES_FILE }}"
          echo "✅ Found application file: ${{ env.APP_FILE }}"

      - name: Update Image in Values File
        run: |
          echo "Updating image tag in ${{ env.VALUES_FILE }}"
          sed -i "s|tag: \".*\"|tag: \"${{ env.TAG }}\"|" "${{ env.VALUES_FILE }}"

      - name: Update valueFiles in application.yaml (Ensure Only One values File)
        run: |
          echo "Updating valueFiles in ${{ env.APP_FILE }}"

          # `valueFiles:` 부분을 찾아서 올바른 values-{BRANCH}.yaml로 변경
          sed -i "/valueFiles:/ {n; s|- .*|- ${{ env.VALUE_FILE_NAME }}|}" "${{ env.APP_FILE }}"

          echo "=== Updated application.yaml ==="
          cat "${{ env.APP_FILE }}"

      - name: Verify Changes Before Commit
        run: |
          echo "Checking for modified files..."
          git status
          git diff

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git add "${{ env.VALUES_FILE }}" "${{ env.APP_FILE }}"

          # 변경 사항이 있는 경우에만 푸시
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update image tag and valueFiles to ${{ env.VALUE_FILE_NAME }} in ${{ env.APP_FILE }}"
            git push origin main  # ✅ 항상 main 브랜치로 푸시
          fi
